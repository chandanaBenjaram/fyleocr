task::::::detect input receipt image and extract date present on it.

my approaches:::: first step common is:read input image,if possible rescale it,turn to gray to reduce size,guassian 5*5 kernel, tresholding to reduce outliers ,then perform canny edge detection to get edges of just receipt from full image.

1.contour approach::::::::: after thresholding tried to draw contours with cv2.contours,as most of images are of receipts only so thought to get maximum rectangle area as ROI.then passed that ROI to OCR to get text,using regular expression searched for date pattern. but drawback is it is taking complete image rather than just receipt part.passing an image as it is not a good input to ocr. link::https://drive.google.com/file/d/1zn2qS704WdrPd6sTnpD49h1uOvzpybzQ/view?usp=sharing

2.canny,probablistic,hough,kmeans:::::::::: to crop exact receipt,tried canny then applied probabilistic-hough to get line points.then seperated vertical and horiontal lines,filtered out less width lines,found intersections of vertical and horizontal points.taking intersection points and clustered with k-means to get nearby co-ordinates of rectangle.but drawback is for each run i am getting different centroids sometimes one centroid and sometimes 2,3.as the number of centroids are uncertain ,i could not use them to crop receipt exactly link::https://drive.google.com/file/d/1WQ09MUDYyZ7VqGl-VRHCjdlbsd_qddRK/view?usp=sharing 3.my own algorithm:::::::::::: To speed up and improve the accuracy of OCR engine, Presenting my own apporach to the problem, i have not seen this kind of implementation before. I actually went throught the follwoing PHD paper and implemented the problem my own way. https://www.cs.princeton.edu/courses/archive/spring18/cos598B/public/projects/System/COS598B_spr2018_ReceiptParsing.pdf These are the steps implemented for extracting the date from the bill:

Converted the image into gray and did the rescaling of image to speed the computation of the image.
There are different ways of detecting the edges in the image, Canny edge dection is used as input to the probabilitc hough transofrm to create the edge co-ordiantes 3.Used co-ordiante geoemtry and nearest neighbours to reduce the number of co-ordiantes. 4.Intially divided the space into four cordiantes and finding the sum of distance square of each cordinates which are falling in which quadrant with respect to that co-ordinate.
to reduce the image co-ordinates , created Q1/Q2/Q3/Q4(four quadrnts of X/Y plane) and removed those co-ordinates which has co-ordiantes on all the sides.
This will give significant reduction of co-ordiantes, so that we can find the right co-ordiantes to crop the image. 7.Next developed nearest co-ordiante apporach by sorting the cordinates in X dimention as Key and Y dimenison as a key
For each of x-cordiante find the correspoding code in Y sorted array , Based on K(neareset neighbers ) choosing the co-ordinates around it to find the distance square sum of each co-ordinate around it. 9.Repeated step 8, with each Y co-ordinates for the same x-cordiante as above. Then combine the two distance square's to create a distance sqaure sum list for each co-ordiante. 10.Then sorted the ditance with index to eleiminate co-ordinates which has diatnace square sum more than some median 11.After this very few co-ordiantes are left, and used the co-odiante geometry apporach by Creating Q1,Q2,Q3,Q4 , and index for each cordinate to find corner co-ordiantes by using the max disatance square sum of each quadrant for that co-ordinate, with this determined the max of each quadrant co-ordiante to reduce the co-ordiantes to four co-ordiatnes.
As I have done the recalling , which reduce the image resolution and perormed edge detection on rescaled image , the co-ordintaes as to be mapped to originial image based on the rescalling factors.
As the rescaled image wiil have more noise due to rescaling , tesarract detection will be difficult as clarity of image reduces.
So recomputed the co-ordiantes to crop original image based on the rescaled co-ordiantes obatined in step12
The cropped gray image is given to teserrract OCR to extract the text, then used Re search to find out the date matching the line and extract with string match.
There are other ideas which i am thinking to explore to reduce the processing time and improve the accuracy. Find the co-ordinates around the text region and binarize it based on the local mean as a threshold to improve the accuracy and speed. These ideas are my own apporach to the problem . I am thinking Some of it may can be pattented.